name: Release and Publish

on:
  release:
    types: [published]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate tag format
        run: |
          if [[ ! "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
            echo "Error: Tag ${{ github.ref_name }} does not match semantic versioning format (v1.2.3 or v1.2.3-alpha.1)"
            exit 1
          fi
          echo "Tag ${{ github.ref_name }} is valid"

  build-and-test:
    name: Build and Test for Release
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for versioning

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync --all-extras --dev

      - name: Run linting
        run: |
          uv run ruff check .
          uv run black --check .

      - name: Run type checking
        run: uv run pyright

      - name: Run tests
        run: uv run pytest -v

      - name: Build package
        run: uv build

      - name: Verify version matches tag
        run: |
          # Extract version from built wheel
          WHEEL_VERSION=$(uv run python -c "
          import os
          import glob
          from importlib.metadata import version
          from pathlib import Path

          # Find wheel file
          wheels = glob.glob('dist/*.whl')
          if not wheels:
              raise RuntimeError('No wheel found')

          wheel_path = Path(wheels[0])
          wheel_name = wheel_path.stem

          # Extract version from wheel filename
          # Format: package-version-python-abi-platform
          parts = wheel_name.split('-')
          version_part = parts[1]
          print(version_part)
          ")

          # Extract version from git tag (remove 'v' prefix)
          TAG_VERSION="${{ github.ref_name }}"
          TAG_VERSION="${TAG_VERSION#v}"

          echo "Wheel version: $WHEEL_VERSION"
          echo "Tag version: $TAG_VERSION"

          if [[ "$WHEEL_VERSION" != "$TAG_VERSION" ]]; then
            echo "Error: Version mismatch between wheel ($WHEEL_VERSION) and tag ($TAG_VERSION)"
            exit 1
          fi

          echo "Version verification successful"

      - name: Test package installation
        run: |
          # Create a fresh environment and test installation
          uv venv --python 3.12 test-release-env
          source test-release-env/bin/activate
          pip install dist/*.whl

          # Test basic functionality
          python -c "
          import sys
          sys.path.insert(0, '.')
          from image_gen_mcp.main import app
          print('Package imports successfully')
          print(f'FastMCP app: {app}')
          "

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-distributions
          path: dist/
          retention-days: 30

  publish-to-testpypi:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: build-and-test
    environment:
      name: testpypi
      url: https://test.pypi.org/p/image-gen-mcp
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          name: release-distributions
          path: dist/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

      - name: Verify TestPyPI publication
        run: |
          echo "Waiting for package to be available on TestPyPI..."
          sleep 30

          # Try to install from TestPyPI (this may fail if dependencies aren't available)
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ image-gen-mcp || echo "TestPyPI installation test completed (may have failed due to dependencies)"

  publish-to-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build-and-test, publish-to-testpypi]
    environment:
      name: pypi
      url: https://pypi.org/p/image-gen-mcp
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          name: release-distributions
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: Verify PyPI publication
        run: |
          echo "Waiting for package to be available on PyPI..."
          sleep 60

          # Verify installation from PyPI
          pip install image-gen-mcp
          python -c "
          try:
              import image_gen_mcp
              print('✅ Package successfully installed from PyPI and imports correctly')
          except ImportError as e:
              print(f'❌ Import failed: {e}')
              exit(1)
          "

  create-github-release-assets:
    name: Update GitHub Release with Assets
    runs-on: ubuntu-latest
    needs: publish-to-pypi
    permissions:
      contents: write
    steps:
      - name: Download distributions
        uses: actions/download-artifact@v4
        with:
          name: release-distributions
          path: dist/

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*.whl
            dist/*.tar.gz
          generate_release_notes: true
          append_body: |

            ## Installation

            Install from PyPI:
            ```bash
            pip install image-gen-mcp
            ```

            Install with uv:
            ```bash
            uv add image-gen-mcp
            ```

            Use with uvx:
            ```bash
            uvx --from image-gen-mcp image-gen-mcp
            ```

            ## MCP Integration

            Add to your `mcp.json`:
            ```json
            {
              "mcpServers": {
                "image-gen-mcp": {
                  "command": "uvx",
                  "args": ["--from", "image-gen-mcp", "image-gen-mcp"],
                  "env": {
                    "OPENAI_API_KEY": "your-key-here"
                  }
                }
              }
            }
            ```
