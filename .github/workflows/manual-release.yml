name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
        default: 'patch'
      prerelease_type:
        description: 'Pre-release type (only for prerelease)'
        required: false
        type: choice
        options:
          - alpha
          - beta
          - rc
        default: 'alpha'
      dry_run:
        description: 'Dry run (only show what would be released)'
        required: false
        type: boolean
        default: false

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Set up Python
        run: uv python install 3.12

      - name: Install dependencies
        run: uv sync --all-extras --dev

      - name: Get current version
        id: current_version
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

          # Remove 'v' prefix for version comparison
          CURRENT_VERSION=${LATEST_TAG#v}
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT="${{ steps.current_version.outputs.current_version }}"
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          PRERELEASE_TYPE="${{ github.event.inputs.prerelease_type }}"

          # Split version into parts
          IFS='.' read -r major minor patch <<< "$CURRENT"

          # Remove any existing pre-release suffix from patch
          patch=$(echo "$patch" | sed 's/-.*$//')

          case "$VERSION_TYPE" in
            patch)
              patch=$((patch + 1))
              NEW_VERSION="$major.$minor.$patch"
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              NEW_VERSION="$major.$minor.$patch"
              ;;
            major)
              major=$((major + 1))
              minor=0
              patch=0
              NEW_VERSION="$major.$minor.$patch"
              ;;
            prerelease)
              # Check if current version is already a prerelease
              if [[ "$CURRENT" == *"-"* ]]; then
                # Increment prerelease number
                BASE_VERSION=$(echo "$CURRENT" | cut -d'-' -f1)
                CURRENT_PRERELEASE=$(echo "$CURRENT" | cut -d'-' -f2)
                PRERELEASE_NUM=$(echo "$CURRENT_PRERELEASE" | grep -o '[0-9]*$' || echo "1")
                PRERELEASE_NUM=$((PRERELEASE_NUM + 1))
                NEW_VERSION="$BASE_VERSION-$PRERELEASE_TYPE.$PRERELEASE_NUM"
              else
                # First prerelease
                NEW_VERSION="$CURRENT-$PRERELEASE_TYPE.1"
              fi
              ;;
          esac

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_tag=v$NEW_VERSION" >> $GITHUB_OUTPUT

          echo "Current version: $CURRENT"
          echo "New version: $NEW_VERSION"

      - name: Dry run check
        if: github.event.inputs.dry_run == 'true'
        run: |
          echo "üîç DRY RUN MODE - No changes will be made"
          echo "Current version: ${{ steps.current_version.outputs.current_version }}"
          echo "New version: ${{ steps.new_version.outputs.new_version }}"
          echo "New tag: ${{ steps.new_version.outputs.new_tag }}"
          echo "Version type: ${{ github.event.inputs.version_type }}"

          # Test build with new version
          git tag "${{ steps.new_version.outputs.new_tag }}"
          uv build
          echo "‚úÖ Build would succeed"
          git tag -d "${{ steps.new_version.outputs.new_tag }}"

          exit 0

      - name: Run tests
        if: github.event.inputs.dry_run != 'true'
        run: |
          uv run pytest -v
          uv run ruff check .
          uv run black --check .
          uv run pyright

      - name: Create and push tag
        if: github.event.inputs.dry_run != 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Create tag
          git tag -a "${{ steps.new_version.outputs.new_tag }}" -m "Release ${{ steps.new_version.outputs.new_tag }}"

          # Push tag
          git push origin "${{ steps.new_version.outputs.new_tag }}"

      - name: Build release package
        if: github.event.inputs.dry_run != 'true'
        run: uv build

      - name: Generate changelog
        if: github.event.inputs.dry_run != 'true'
        id: changelog
        run: |
          # Generate changelog between tags
          PREVIOUS_TAG="${{ steps.current_version.outputs.latest_tag }}"
          NEW_TAG="${{ steps.new_version.outputs.new_tag }}"

          if [ "$PREVIOUS_TAG" = "v0.0.0" ]; then
            CHANGELOG="Initial release"
          else
            CHANGELOG=$(git log --pretty=format:"- %s" "$PREVIOUS_TAG..$NEW_TAG" | head -20)
            if [ -z "$CHANGELOG" ]; then
              CHANGELOG="- Minor updates and improvements"
            fi
          fi

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: github.event.inputs.dry_run != 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.new_version.outputs.new_tag }}
          name: Release ${{ steps.new_version.outputs.new_tag }}
          body: |
            ## Changes

            ${{ steps.changelog.outputs.changelog }}

            ## Installation

            ```bash
            pip install image-gen-mcp==${{ steps.new_version.outputs.new_version }}
            ```

            Or with uv:
            ```bash
            uv add image-gen-mcp==${{ steps.new_version.outputs.new_version }}
            ```
          files: |
            dist/*.whl
            dist/*.tar.gz
          draft: false
          prerelease: ${{ contains(steps.new_version.outputs.new_version, '-') }}
          generate_release_notes: true
