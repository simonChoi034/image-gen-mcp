"""
Test the new exception-based error handling approach.
"""

from image_gen_mcp.exceptions import (
    AuthenticationError,
    ConfigurationError,
    ImageGenerationError,
    ModelNotFoundError,
    NoImagesGeneratedError,
    ProviderError,
    ProviderUnavailableError,
    RateLimitError,
    UnsupportedOperationError,
    ValidationError,
)
from image_gen_mcp.shard.enums import Provider


def test_image_generation_error_base():
    """Test base ImageGenerationError class."""
    error = ImageGenerationError("Test error", "test_code", {"key": "value"})

    assert str(error) == "Test error"
    assert error.error_code == "test_code"
    assert error.user_message == "Test error"
    assert error.details == {"key": "value"}


def test_provider_error():
    """Test ProviderError exception."""
    error = ProviderError("API failed", Provider.OPENAI, {"status": 500})

    assert error.error_code == "provider_error"
    assert error.provider == Provider.OPENAI
    assert error.details["provider"] == "openai"
    assert error.details["status"] == 500


def test_no_images_generated_error():
    """Test NoImagesGeneratedError exception."""
    error = NoImagesGeneratedError(Provider.GEMINI, "gemini-2.5-flash-image-preview")

    assert error.error_code == "no_images_generated"
    assert "No images were generated by gemini" in error.user_message
    assert error.details["provider"] == "gemini"
    assert error.details["model"] == "gemini-2.5-flash-image-preview"


def test_model_not_found_error():
    """Test ModelNotFoundError exception."""
    error = ModelNotFoundError("invalid-model", Provider.OPENAI)

    assert error.error_code == "model_not_found"
    assert "Model 'invalid-model' not found" in error.user_message
    assert "get_model_capabilities" in error.user_message
    assert error.details["model"] == "invalid-model"
    assert error.details["provider"] == "openai"


def test_provider_unavailable_error():
    """Test ProviderUnavailableError exception."""
    error = ProviderUnavailableError(Provider.VERTEX)

    assert error.error_code == "provider_unavailable"
    assert error.provider == Provider.VERTEX
    assert "Provider 'vertex' is not enabled" in error.user_message


def test_validation_error():
    """Test ValidationError exception."""
    error = ValidationError("Invalid size parameter", "size")

    assert error.error_code == "validation_error"
    assert error.user_message == "Invalid size parameter"
    assert error.details["field"] == "size"


def test_unsupported_operation_error():
    """Test UnsupportedOperationError exception."""
    error = UnsupportedOperationError("edit", Provider.OPENAI, "dall-e-3")

    assert error.error_code == "unsupported_operation"
    assert "Operation 'edit' is not supported by openai model 'dall-e-3'" in error.user_message
    assert error.details["operation"] == "edit"
    assert error.details["provider"] == "openai"
    assert error.details["model"] == "dall-e-3"


def test_configuration_error():
    """Test ConfigurationError exception."""
    error = ConfigurationError("Missing API key", "OPENAI_API_KEY")

    assert error.error_code == "configuration_error"
    assert error.user_message == "Missing API key"
    assert error.details["setting"] == "OPENAI_API_KEY"


def test_rate_limit_error():
    """Test RateLimitError exception."""
    error = RateLimitError(Provider.OPENAI, 60)

    assert error.error_code == "rate_limit_exceeded"
    assert "Rate limit exceeded for provider 'openai'" in error.user_message
    assert "Try again in 60 seconds" in error.user_message
    assert error.details["provider"] == "openai"
    assert error.details["retry_after"] == 60


def test_authentication_error():
    """Test AuthenticationError exception."""
    error = AuthenticationError(Provider.GEMINI)

    assert error.error_code == "authentication_error"
    assert "Authentication failed for provider 'gemini'" in error.user_message
    assert error.details["provider"] == "gemini"


def test_inheritance():
    """Test that all errors inherit from ImageGenerationError."""
    exceptions = [
        ProviderError("test", Provider.OPENAI),
        NoImagesGeneratedError(Provider.OPENAI, "test"),
        ModelNotFoundError("test", Provider.OPENAI),
        ProviderUnavailableError(Provider.OPENAI),
        ValidationError("test"),
        UnsupportedOperationError("test", Provider.OPENAI, "test"),
        ConfigurationError("test"),
        RateLimitError(Provider.OPENAI),
        AuthenticationError(Provider.OPENAI),
    ]

    for exc in exceptions:
        assert isinstance(exc, ImageGenerationError)
        assert hasattr(exc, "error_code")
        assert hasattr(exc, "user_message")
        assert hasattr(exc, "details")
